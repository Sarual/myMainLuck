<template>
  <TitleBar :titleText.sync="titleText" :isBackBtn.sync="isBackBtn">
  </TitleBar>
  <LoadingX :isLoading.sync="isLoading"></LoadingX>
  <TabBar @currentTab.user="getCurrentTab" :tabList.sync="tabList" :currentTab.sync="currentTab"></TabBar>
  <swiper class="text" style="text-align:center; margin-top:50rpx;" current="{{currentTab}}" bindchange="switchTab" duration='300'>
    <swiper-item>
      <scroll-view scroll-y="{{true}}">
        <image src="../assets/images/another/address.png" style="height:60rpx;width:60rpx;display:inline-block;text-align:center;" @tap="goGPS"></image>
      </scroll-view>
    </swiper-item>
    <swiper-item>
      <scroll-view scroll-y="{{true}}">
        <view @tap="openAddressPicker">{{province ? province.name : '省'}} - {{city ? city.name : '市' }} - {{area ? area.name : '区' }}</view>
      </scroll-view>
    </swiper-item>
    <swiper-item>
      <scroll-view scroll-y="{{true}}">
        <view @tap="optCity">{{cityName}}</view>
      </scroll-view>
    </swiper-item>
  </swiper>
  <AreaPicker @areaArray.user="areaPickerArray"></AreaPicker>
</template>

<script>
  import wepy from 'wepy'
  import base from '../mixins/base'
  import TitleBar from '../components/TitleBar'
  import LoadingX from '../components/LoadingX'
  import TabBar from '../components/TabBar'
  import AreaPicker from '../components/AreaPicker'
  import {
    LATITUDE,
    LONGITUDE
  } from '../assets/utils/constant'
  export default class commonUserInfo extends wepy.page {
    mixins = [base]
    config = {}
    data = {
      titleText: '',
      isBackBtn: true,
      isLoading: true,
      currentTab: 0,
      tabList: ['旅客定位', '地址', 'AA地址选择'],
      cityName: '北京',
      id: '',
      province: '',
      city: '',
      area: '',
      provinceCode: '',
      cityCode: '',
      areaCode: ''
    }
    components = {
      TitleBar,
      LoadingX,
      TabBar,
      AreaPicker
    }
    methods = {
      getCurrentTab(cur, evt) {
        let that = this
        that.currentTab = cur
        that.$apply()
      },
      switchTab(e) {
        // 父组件改变子组件的属性
        let current = e.detail.current.toString()
        if (this.currentTab === current) return false
        else {
          this.currentTab = current
        }
      },
      goGPS() {
        // 地理定位
        wepy.getLocation({
          type: 'wgs84',
          success(res) {
            console.log('地理位置信息:', res)
            wepy.setStorageSync(LATITUDE, res.latitude)
            wepy.setStorageSync(LONGITUDE, res.longitude)
            // 根据经纬度获取用户的城市名称（请求接口获取）
          }
        })
      },
      openAddressPicker() {
        this.$invoke('AreaPicker', 'openAddressPicker')
      },
      areaPickerArray(province, city, area) {
        console.log(province, city, area)
        this.province = province
        this.city = city
        this.area = area
        this.provinceCode = province.code
        this.cityCode = city.code
        this.areaCode = area.code
        this.$apply()
      },
      optCity() {
        this.$goto('optCity')
      }
    }
    onLoad(options) {
      var that = this
      that.titleText = '常用信息'
      if (that.isLoading) {
        that.loadBarLimit()
      }
    }
    onShow() {
      // this.province = {
      //   code: '120000',
      //   name: '天津市'
      // }
      // this.city = {
      //   code: '120100',
      //   name: '天津市'
      // }
      // this.area = {
      //   code: '120101',
      //   name: '和平区'
      // }
      this.province = {
        code: '110000',
        name: '北京市'
      }
      this.city = {
        code: '110100',
        name: '北京市'
      }
      this.area = {
        code: '110101',
        name: '东城区'
      }
      this.$invoke('AreaPicker', 'setAddressPickerValue', this.province, this.city, this.area)
    }
    // 普通自定义方法在methods对象外声明，与methods平级
    loadBarLimit() {
      setTimeout(() => {
        this.isLoading = false
        this.$apply()
      }, 1000)
    }
  }
</script>

<style lang="scss" rel="stylesheet/scss" scoped>
  @import "../assets/stylesheets/layout.scss";
</style>
